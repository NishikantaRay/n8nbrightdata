{
  "name": "Smart Commute Assistant - Real-Time Traffic Intelligence",
  "nodes": [
    {
      "parameters": {
        "rule": "0 0 7,8,17,18 * * 1-5"
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [200, 200],
      "notes": "Runs at 7AM, 8AM for morning commute and 5PM, 6PM for evening commute on weekdays"
    },
    {
      "parameters": {
        "url": "https://api.openweathermap.org/data/2.5/weather",
        "options": {
          "continueOnFail": true
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "q",
              "value": "Bangalore,IN"
            },
            {
              "name": "appid",
              "value": "={{$credentials.openWeatherApi.apiKey}}"
            },
            {
              "name": "units",
              "value": "metric"
            }
          ]
        }
      },
      "name": "Weather Check",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [450, 200],
      "credentials": {
        "openWeatherApi": "OpenWeather API"
      },
      "notes": "Gets current weather and checks for rain conditions"
    },
    {
      "parameters": {
        "url": "https://api.openweathermap.org/data/2.5/forecast",
        "options": {
          "continueOnFail": true
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "q",
              "value": "Bangalore,IN"
            },
            {
              "name": "appid",
              "value": "={{$credentials.openWeatherApi.apiKey}}"
            },
            {
              "name": "units",
              "value": "metric"
            },
            {
              "name": "cnt",
              "value": "8"
            }
          ]
        }
      },
      "name": "Weather Forecast",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [700, 200],
      "credentials": {
        "openWeatherApi": "OpenWeather API"
      },
      "notes": "Gets 3-hour forecast to predict rain during commute"
    },
    {
      "parameters": {
        "url": "https://brightdata-endpoint.com/news-scraper",
        "method": "POST",
        "options": {
          "continueOnFail": true
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "sites",
              "value": "[\"timesofindia.indiatimes.com\", \"deccanherald.com\", \"thehindu.com\", \"bangaloremirror.indiatimes.com\"]"
            },
            {
              "name": "keywords",
              "value": "[\"bangalore traffic\", \"bengaluru traffic\", \"road closure\", \"accident\", \"protest\", \"bandh\", \"metro\", \"BMTC\"]"
            },
            {
              "name": "time_range",
              "value": "24h"
            }
          ]
        }
      },
      "name": "News Scraper - Traffic Updates",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [450, 400],
      "credentials": {
        "brightDataApi": "Bright Data API"
      },
      "notes": "Scrapes local news for traffic incidents, road closures, and protests"
    },
    {
      "parameters": {
        "url": "https://brightdata-endpoint.com/social-scraper",
        "method": "POST",
        "options": {
          "continueOnFail": true
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "platform",
              "value": "twitter"
            },
            {
              "name": "hashtags",
              "value": "[\"#BengaluruTraffic\", \"#BangaloreTraffic\", \"#BlrTraffic\", \"#BengaluruRains\"]"
            },
            {
              "name": "keywords",
              "value": "[\"Outer Ring Road\", \"ORR\", \"Electronic City\", \"Whitefield\", \"Koramangala\", \"Indiranagar\", \"HSR Layout\", \"accident\", \"jam\", \"waterlogging\"]"
            },
            {
              "name": "time_range",
              "value": "3h"
            },
            {
              "name": "limit",
              "value": "50"
            }
          ]
        }
      },
      "name": "Social Media Scraper",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [700, 400],
      "credentials": {
        "brightDataApi": "Bright Data API"
      },
      "notes": "Scrapes Twitter for real-time traffic updates from locals"
    },
    {
      "parameters": {
        "url": "https://brightdata-endpoint.com/traffic-monitor",
        "method": "POST",
        "responseFormat": "json",
        "options": {
          "continueOnFail": true
        },
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "sites",
              "value": "[\"trafficpolicebangalore.gov.in\", \"bangaloretrafficpolice.gov.in\", \"karnataka.gov.in\"]"
            },
            {
              "name": "data_points",
              "value": "[\"live_traffic_updates\", \"road_closures\", \"diversions\", \"incidents\"]"
            }
          ]
        }
      },
      "name": "Official Traffic Data Scraper",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [950, 400],
      "credentials": {
        "brightDataApi": "Bright Data API"
      },
      "notes": "Scrapes official traffic police and government sites for authoritative traffic data"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/directions/json",
        "responseFormat": "json",
        "options": {
          "continueOnFail": true
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "origin",
              "value": "={{$vars.HOME_ADDRESS}}"
            },
            {
              "name": "destination",
              "value": "={{$vars.OFFICE_ADDRESS}}"
            },
            {
              "name": "alternatives",
              "value": "true"
            },
            {
              "name": "departure_time",
              "value": "now"
            },
            {
              "name": "traffic_model",
              "value": "best_guess"
            },
            {
              "name": "key",
              "value": "={{$credentials.googleMapsApi.apiKey}}"
            }
          ]
        }
      },
      "name": "Google Maps - Primary Routes",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [950, 200],
      "credentials": {
        "googleMapsApi": "Google Maps API"
      },
      "notes": "Gets multiple route options with real-time traffic data"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/directions/json",
        "responseFormat": "json",
        "options": {
          "continueOnFail": true
        },
        "queryParametersUi": {
          "parameter": [
            {
              "name": "origin",
              "value": "={{$vars.HOME_ADDRESS}}"
            },
            {
              "name": "destination",
              "value": "={{$vars.OFFICE_ADDRESS}}"
            },
            {
              "name": "alternatives",
              "value": "true"
            },
            {
              "name": "avoid",
              "value": "highways"
            },
            {
              "name": "departure_time",
              "value": "now"
            },
            {
              "name": "key",
              "value": "={{$credentials.googleMapsApi.apiKey}}"
            }
          ]
        }
      },
      "name": "Google Maps - Alternative Routes",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1200, 200],
      "credentials": {
        "googleMapsApi": "Google Maps API"
      },
      "notes": "Gets alternative routes avoiding highways for comparison"
    },
    {
      "parameters": {
        "functionCode": "// Enhanced Decision Engine for Smart Commute Assistant\n\n// Extract data from all sources\nconst weatherCurrent = items[0]?.json || { main: { temp: 25 }, weather: [{ description: 'clear sky' }] };\nconst weatherForecast = items[1]?.json || { list: [] };\nconst newsData = items[2]?.json || { articles: [] };\nconst socialData = items[3]?.json || { tweets: [] };\nconst officialTraffic = items[4]?.json || { updates: [] };\nconst primaryRoutes = items[5]?.json?.routes || [];\nconst alternativeRoutes = items[6]?.json?.routes || [];\n\n// Combine all route options\nconst allRoutes = [...primaryRoutes, ...alternativeRoutes];\n\n// Initialize scoring system\nfunction scoreRoute(route, routeIndex) {\n  let score = 100;\n  const summary = route.summary || `Route ${routeIndex + 1}`;\n  const duration = route.legs[0]?.duration_in_traffic || route.legs[0]?.duration || { value: 999999 };\n  \n  // Base score on travel time (lower is better)\n  score -= (duration.value / 60); // Subtract minutes\n  \n  // Check for incidents in news data\n  const roadMentions = newsData.articles?.filter(article => \n    summary.toLowerCase().split(' ').some(word => \n      article.title?.toLowerCase().includes(word) || \n      article.content?.toLowerCase().includes(word)\n    )\n  ) || [];\n  \n  roadMentions.forEach(mention => {\n    if (mention.title?.toLowerCase().includes('accident')) score -= 50;\n    if (mention.title?.toLowerCase().includes('closure')) score -= 100;\n    if (mention.title?.toLowerCase().includes('protest')) score -= 75;\n    if (mention.title?.toLowerCase().includes('bandh')) score -= 150;\n  });\n  \n  // Check social media mentions\n  const socialMentions = socialData.tweets?.filter(tweet => \n    summary.toLowerCase().split(' ').some(word => \n      tweet.text?.toLowerCase().includes(word)\n    )\n  ) || [];\n  \n  socialMentions.forEach(tweet => {\n    if (tweet.text?.toLowerCase().includes('jam')) score -= 20;\n    if (tweet.text?.toLowerCase().includes('stuck')) score -= 25;\n    if (tweet.text?.toLowerCase().includes('accident')) score -= 40;\n    if (tweet.text?.toLowerCase().includes('waterlogging')) score -= 60;\n    if (tweet.text?.toLowerCase().includes('clear')) score += 10;\n  });\n  \n  // Check official traffic updates\n  officialTraffic.updates?.forEach(update => {\n    if (summary.toLowerCase().split(' ').some(word => \n      update.message?.toLowerCase().includes(word)\n    )) {\n      if (update.severity === 'high') score -= 80;\n      if (update.severity === 'medium') score -= 40;\n      if (update.severity === 'low') score -= 15;\n    }\n  });\n  \n  return { route, score, duration, summary };\n}\n\n// Score all routes\nconst scoredRoutes = allRoutes.map(scoreRoute).sort((a, b) => b.score - a.score);\nconst bestRoute = scoredRoutes[0] || {\n  route: { summary: 'Default Route', legs: [{ duration: { text: '1h 30m', value: 5400 } }] },\n  score: 0,\n  duration: { text: '1h 30m', value: 5400 },\n  summary: 'Default Route'\n};\n\n// Weather analysis\nconst currentWeather = weatherCurrent.weather?.[0]?.description || 'clear';\nconst currentTemp = weatherCurrent.main?.temp || 25;\nconst isRaining = currentWeather.toLowerCase().includes('rain');\n\n// Check if rain is expected during commute (next 3 hours)\nconst upcomingRain = weatherForecast.list?.slice(0, 1).some(forecast => \n  forecast.weather?.[0]?.description?.toLowerCase().includes('rain')\n) || false;\n\n// Weather impact on travel time\nlet weatherImpact = '';\nif (isRaining || upcomingRain) {\n  weatherImpact = '⚠️ Rain expected - Allow extra 20-30 minutes';\n} else if (currentWeather.includes('fog') || currentWeather.includes('mist')) {\n  weatherImpact = '🌫️ Low visibility - Drive carefully';\n} else {\n  weatherImpact = '☀️ Clear weather conditions';\n}\n\n// Generate traffic alerts summary\nconst activeAlerts = [];\nnewsData.articles?.slice(0, 3).forEach(article => {\n  if (article.title?.toLowerCase().includes('accident') || \n      article.title?.toLowerCase().includes('closure') ||\n      article.title?.toLowerCase().includes('protest')) {\n    activeAlerts.push(`📰 ${article.title}`);\n  }\n});\n\nsocialData.tweets?.slice(0, 2).forEach(tweet => {\n  if (tweet.text?.toLowerCase().includes('accident') ||\n      tweet.text?.toLowerCase().includes('jam') ||\n      tweet.text?.toLowerCase().includes('stuck')) {\n    activeAlerts.push(`🐦 ${tweet.text.substring(0, 100)}...`);\n  }\n});\n\n// Time-based recommendations\nconst currentHour = new Date().getHours();\nlet timeRecommendation = '';\n\nif (currentHour >= 7 && currentHour <= 9) {\n  timeRecommendation = 'Peak morning hours - Consider leaving 15 mins earlier or later';\n} else if (currentHour >= 17 && currentHour <= 19) {\n  timeRecommendation = 'Peak evening hours - Heavy traffic expected';\n} else {\n  timeRecommendation = 'Off-peak travel time - Optimal conditions';\n}\n\n// Calculate confidence score\nconst dataQuality = {\n  weather: weatherCurrent.main ? 100 : 50,\n  news: newsData.articles?.length || 0,\n  social: socialData.tweets?.length || 0,\n  official: officialTraffic.updates?.length || 0,\n  routes: allRoutes.length\n};\n\nconst confidenceScore = Math.min(100, \n  (dataQuality.weather + \n   Math.min(dataQuality.news * 10, 50) + \n   Math.min(dataQuality.social * 2, 30) + \n   Math.min(dataQuality.official * 15, 50) + \n   Math.min(dataQuality.routes * 20, 40)) / 2.7\n);\n\nreturn [{\n  json: {\n    recommendation: {\n      route: bestRoute.summary,\n      duration: bestRoute.duration.text,\n      confidence: Math.round(confidenceScore),\n      score: Math.round(bestRoute.score)\n    },\n    weather: {\n      current: `${currentWeather}, ${currentTemp}°C`,\n      impact: weatherImpact,\n      raining: isRaining,\n      rainExpected: upcomingRain\n    },\n    traffic: {\n      timeRecommendation,\n      activeAlerts: activeAlerts.slice(0, 5),\n      alternativeRoutes: scoredRoutes.slice(1, 3).map(r => ({\n        route: r.summary,\n        duration: r.duration.text,\n        score: Math.round(r.score)\n      }))\n    },\n    message: `🚗 *Smart Commute Recommendation*\\n\\n*Best Route:* ${bestRoute.summary}\\n*Duration:* ${bestRoute.duration.text}\\n*Confidence:* ${Math.round(confidenceScore)}%\\n\\n*Weather:* ${weatherImpact}\\n*Traffic:* ${timeRecommendation}\\n\\n${activeAlerts.length > 0 ? '*Active Alerts:*\\n' + activeAlerts.slice(0, 3).join('\\n') : '*No major incidents reported*'}`,\n    metadata: {\n      timestamp: new Date().toISOString(),\n      dataQuality,\n      routesAnalyzed: allRoutes.length,\n      alertsFound: activeAlerts.length\n    }\n  }\n}];"
      },
      "name": "AI Decision Engine",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1450, 300],
      "notes": "Advanced decision engine that combines all data sources and applies intelligent scoring"
    },
    {
      "parameters": {
        "authentication": "none",
        "url": "https://slack.com/api/chat.postMessage",
        "method": "POST",
        "options": {},
        "bodyParameters": {
          "channel": "={{$vars.SLACK_CHANNEL || '#commute'}}",
          "blocks": "[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"{{$json['message']}}\"}},{\"type\":\"section\",\"fields\":[{\"type\":\"mrkdwn\",\"text\":\"*Confidence Score:*\\n{{$json['recommendation']['confidence']}}%\"},{\"type\":\"mrkdwn\",\"text\":\"*Data Sources:*\\n{{$json['metadata']['routesAnalyzed']}} routes, {{$json['metadata']['alertsFound']}} alerts\"}]},{\"type\":\"actions\",\"elements\":[{\"type\":\"button\",\"text\":{\"type\":\"plain_text\",\"text\":\"📍 Open in Maps\"},\"url\":\"https://maps.google.com/dir/{{$vars.HOME_ADDRESS}}/{{$vars.OFFICE_ADDRESS}}\"},{\"type\":\"button\",\"text\":{\"type\":\"plain_text\",\"text\":\"🔄 Refresh Data\"},\"value\":\"refresh\"}]}]"
        },
        "headers": {
          "Authorization": "Bearer {{$credentials.slackApi.token}}",
          "Content-Type": "application/json"
        }
      },
      "name": "Send Enhanced Slack Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1700, 200],
      "credentials": {
        "slackApi": "Slack API"
      },
      "notes": "Sends rich notification with interactive buttons and detailed data"
    },
    {
      "parameters": {
        "authentication": "none",
        "url": "https://api.telegram.org/bot{{$credentials.telegramBot.token}}/sendMessage",
        "method": "POST",
        "options": {},
        "bodyParameters": {
          "chat_id": "={{$vars.TELEGRAM_CHAT_ID}}",
          "text": "{{$json['message']}}",
          "parse_mode": "Markdown",
          "reply_markup": "{\"inline_keyboard\":[[{\"text\":\"📍 Open in Maps\",\"url\":\"https://maps.google.com/dir/{{$vars.HOME_ADDRESS}}/{{$vars.OFFICE_ADDRESS}}\"},{\"text\":\"📊 View Details\",\"callback_data\":\"details\"}]]}"
        },
        "headers": {
          "Content-Type": "application/json"
        }
      },
      "name": "Send Telegram Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1700, 400],
      "credentials": {
        "telegramBot": "Telegram Bot"
      },
      "notes": "Alternative notification via Telegram with inline buttons"
    },
    {
      "parameters": {
        "functionCode": "// Emergency Alert System\n// Triggers immediate notifications for severe traffic conditions\n\nconst data = items[0].json;\nconst confidence = data.recommendation.confidence;\nconst alerts = data.traffic.activeAlerts;\nconst weather = data.weather;\n\n// Define emergency conditions\nconst emergencyConditions = [\n  confidence < 30, // Very low confidence in recommendation\n  alerts.some(alert => alert.toLowerCase().includes('bandh')),\n  alerts.some(alert => alert.toLowerCase().includes('complete closure')),\n  weather.impact.includes('Rain expected') && alerts.length > 2,\n  data.recommendation.duration.includes('2h') || data.recommendation.duration.includes('3h')\n];\n\nconst isEmergency = emergencyConditions.some(condition => condition);\n\nif (isEmergency) {\n  return [{\n    json: {\n      ...data,\n      emergency: true,\n      emergencyMessage: `🚨 *TRAFFIC EMERGENCY ALERT* 🚨\\n\\n⚠️ Severe traffic conditions detected!\\n\\n*Recommendation:* Consider working from home or significantly delay your commute.\\n\\n*Issues:*\\n${alerts.slice(0, 3).join('\\n')}\\n\\n*Weather Impact:* ${weather.impact}`,\n      shouldNotifyImmediately: true\n    }\n  }];\n} else {\n  return [{ json: data }];\n}"
      },
      "name": "Emergency Alert Filter",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1450, 500],
      "notes": "Identifies emergency traffic conditions and triggers immediate alerts"
    },
    {
      "parameters": {
        "content": "🚀 **SMART COMMUTE ASSISTANT**\n\n**What this workflow does:**\n• Analyzes weather, traffic news, social media & routes\n• Provides intelligent commute recommendations\n• Sends alerts via Slack/Telegram\n\n**Setup Required:**\n1. Add API credentials in n8n Settings\n2. Set HOME_ADDRESS & OFFICE_ADDRESS variables\n3. Configure notification channels\n\n**Free APIs Used:**\n• OpenWeatherMap (30k calls/month free)\n• Google Maps (40k calls/month free) \n• Bright Data (1k calls/month free)\n\n**Total Cost: $0.00/month** ✅",
        "height": 320,
        "width": 400
      },
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [100, 50]
    },
    {
      "parameters": {
        "content": "⏰ **SCHEDULE TRIGGER**\n\nRuns 4 times daily:\n• 7:00 AM - Morning commute\n• 8:00 AM - Late morning\n• 5:00 PM - Evening commute  \n• 6:00 PM - Late evening\n\nOnly on weekdays (Mon-Fri)\n\n📝 **Cron Pattern:**\n`0 0 7,8,17,18 * * 1-5`\n\n💡 **Tip:** Adjust times based on your commute schedule",
        "height": 200,
        "width": 300
      },
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [150, 350]
    },
    {
      "parameters": {
        "content": "🌤️ **WEATHER INTELLIGENCE**\n\n**Current Weather:**\n• Temperature, humidity, visibility\n• Rain detection\n• Fog/mist conditions\n\n**Forecast (3h intervals):**\n• Next 24 hours prediction\n• Rain probability\n• Severe weather alerts\n\n**Bangalore Impact:**\n• Light rain: +15-25 min\n• Heavy rain: +45-60 min\n• Waterlogging: Avoid Silk Board, KR Puram\n\n🔑 **API:** OpenWeatherMap (FREE)",
        "height": 250,
        "width": 320
      },
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [400, 50]
    },
    {
      "parameters": {
        "content": "📰 **TRAFFIC DATA COLLECTION**\n\n**News Sources:**\n• Times of India, Deccan Herald\n• The Hindu, Bangalore Mirror\n• Keywords: accidents, closures, protests\n\n**Social Media:**\n• Twitter hashtags: #BengaluruTraffic\n• Real-time crowd-sourced updates\n• Locations: ORR, Electronic City, Whitefield\n\n**Official Sources:**\n• Traffic Police Bangalore\n• Government transport sites\n• Live incidents & diversions\n\n🔑 **API:** Bright Data (FREE tier)",
        "height": 280,
        "width": 350
      },
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [400, 550]
    },
    {
      "parameters": {
        "content": "🗺️ **ROUTE OPTIMIZATION**\n\n**Primary Routes:**\n• Real-time traffic data\n• Multiple alternatives\n• Best-guess traffic model\n\n**Alternative Routes:**\n• Avoids highways\n• Local road options\n• Comparison analysis\n\n**Features:**\n• Departure time: NOW\n• Traffic-aware duration\n• Distance calculations\n• Route summaries\n\n🔑 **API:** Google Maps (FREE)",
        "height": 250,
        "width": 300
      },
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [900, 50]
    },
    {
      "parameters": {
        "content": "🧠 **AI DECISION ENGINE**\n\n**Intelligent Scoring:**\n• Route duration analysis\n• Weather impact calculation\n• News incident detection\n• Social media sentiment\n• Official traffic severity\n\n**Output:**\n• Best route recommendation\n• Confidence score (0-100%)\n• Weather impact assessment\n• Active traffic alerts\n• Alternative route options\n\n**Smart Features:**\n• Time-based recommendations\n• Emergency condition detection\n• Data quality assessment",
        "height": 280,
        "width": 340
      },
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1300, 50]
    },
    {
      "parameters": {
        "content": "🚨 **EMERGENCY ALERTS**\n\nTriggers when:\n• Confidence < 30%\n• Bandh/complete closure detected\n• Heavy rain + multiple alerts\n• Commute > 2-3 hours\n\n**Actions:**\n• Immediate notifications\n• Work-from-home suggestions\n• Alternative day recommendations\n\n**Prevents:**\n• Getting stuck in severe traffic\n• Wasted commute time\n• Safety risks",
        "height": 200,
        "width": 280
      },
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1400, 650]
    },
    {
      "parameters": {
        "content": "📱 **SMART NOTIFICATIONS**\n\n**Slack Integration:**\n• Rich message blocks\n• Interactive buttons\n• Confidence scores\n• Data source metrics\n• Direct map links\n\n**Telegram Integration:**\n• Markdown formatting\n• Inline keyboards\n• Alternative notification channel\n\n**Features:**\n• One-click map opening\n• Refresh data option\n• Emergency escalation\n• Professional formatting",
        "height": 250,
        "width": 320
      },
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1650, 50]
    },
    {
      "parameters": {
        "content": "⚙️ **SETUP CHECKLIST**\n\n**Required Credentials:**\n☐ OpenWeatherMap API key\n☐ Google Maps API key  \n☐ Bright Data API token\n☐ Slack API token\n☐ Telegram Bot token (optional)\n\n**Environment Variables:**\n☐ HOME_ADDRESS\n☐ OFFICE_ADDRESS\n☐ SLACK_CHANNEL\n☐ TELEGRAM_CHAT_ID\n\n**Testing:**\n☐ Run individual nodes\n☐ Test complete workflow\n☐ Verify notifications\n\n💰 **All APIs have FREE tiers!**",
        "height": 300,
        "width": 280
      },
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [2000, 200]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Weather Check",
            "type": "main",
            "index": 0
          },
          {
            "node": "News Scraper - Traffic Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Weather Check": {
      "main": [
        [
          {
            "node": "Weather Forecast",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Weather Forecast": {
      "main": [
        [
          {
            "node": "Google Maps - Primary Routes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "News Scraper - Traffic Updates": {
      "main": [
        [
          {
            "node": "Social Media Scraper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Social Media Scraper": {
      "main": [
        [
          {
            "node": "Official Traffic Data Scraper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Official Traffic Data Scraper": {
      "main": [
        [
          {
            "node": "AI Decision Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Maps - Primary Routes": {
      "main": [
        [
          {
            "node": "Google Maps - Alternative Routes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Maps - Alternative Routes": {
      "main": [
        [
          {
            "node": "AI Decision Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Decision Engine": {
      "main": [
        [
          {
            "node": "Emergency Alert Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Emergency Alert Filter": {
      "main": [
        [
          {
            "node": "Send Enhanced Slack Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Telegram Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2.0",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "smart-commute-assistant-enhanced",
  "tags": [
    {
      "createdAt": "2025-08-30T00:00:00.000Z",
      "updatedAt": "2025-08-30T00:00:00.000Z",
      "id": "traffic-automation",
      "name": "Traffic & Automation"
    },
    {
      "createdAt": "2025-08-30T00:00:00.000Z", 
      "updatedAt": "2025-08-30T00:00:00.000Z",
      "id": "bright-data",
      "name": "Bright Data Integration"
    }
  ]
}
